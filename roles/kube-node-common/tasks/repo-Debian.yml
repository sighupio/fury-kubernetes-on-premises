---
- name: Remove deprecated Kubernetes APT repository
  apt_repository:
    filename: "{{ kubernetes_repo_deprecated['name'] }}"
    repo: "{{ kubernetes_repo_deprecated['apt_repo'] }}"
    state: absent

- name: Install apt-transport-https
  apt:
    name: apt-transport-https
    state: latest

- name: Add Kubernetes APT repository
  vars:
    gpg_key: "{{ dependencies_override.apt.gpg_key | default(dependencies[kubernetes_version].apt.gpg_key) }}"
    gpg_keyrings_path: "/etc/apt/keyrings" # use default apt keyrings path
    filename: "{{ dependencies_override.apt.name | default(dependencies[kubernetes_version].apt.name) }}"
    repo: "{{ dependencies_override.apt.repo | default(dependencies[kubernetes_version].apt.repo) }}"
  block:
    - name: Ensure keyring directory exists
      file:
        path: "{{ gpg_keyrings_path }}"
        state: directory

    - name: Import Kubernetes APT public key
      ansible.builtin.get_url:
        url: "{{ gpg_key }}"
        dest: "{{ gpg_keyrings_path }}/kubernetes-apt-keyring.gpg.armored"
        force: true # always download the latest remote key to avoid expiration of the local one

    - name: Dearmor GPG key
      block:
        - file:
            path: "{{ gpg_keyrings_path }}/kubernetes-apt-keyring.gpg"
            state: absent # if the file already exists, the dearmor process fails
        - ansible.builtin.shell:
            cmd: "gpg --dearmor -o {{ gpg_keyrings_path }}/kubernetes-apt-keyring.gpg < {{ gpg_keyrings_path }}/kubernetes-apt-keyring.gpg.armored"

    - name: Add repo source to Apt
      ansible.builtin.apt_repository:
        filename: "{{ filename }}"
        repo: "{{ repo | regex_replace('^(?P<type>deb)?\\ ?(?P<signature>\\[signed-by=\\S+\\])?\\ ?(?P<url>https?://\\S+)\\ ?(?P<suite>\\S+)?\\ ?(?P<component>\\S+)?$', 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] \\g<url>') }}"
        state: present

    - name: Update APT cache
      apt:
        update_cache: true
      changed_when: false

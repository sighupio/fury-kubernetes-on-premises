---
- name: Check packages facts
  package_facts:
    manager: auto

- name: print
  debug:
    msg: "Version of docker-ce is {{ ansible_facts.packages['docker-ce'][0]['version'] }}"
  when: "'docker-ce' in ansible_facts.packages"

- include_tasks: "docker-remove.yml"
  when: "'docker-ce' in ansible_facts.packages"

- name: Fail containerd setup if distribution is not supported
  fail:
    msg: "{{ ansible_distribution }} is not supported by containerd."
  when:
    - ansible_distribution not in ["CentOS", "OracleLinux", "RedHat", "Ubuntu", "Debian", "Rocky"]

- name: containerd | Download containerd
  get_url:
    url: "{{ containerd_download_url }}"
    dest: "/tmp/containerd-{{ containerd_version }}-linux-{{ image_arch }}.tar.gz"

- name: containerd | Unpack containerd archive
  unarchive:
    src: "/tmp/containerd-{{ containerd_version }}-linux-{{ image_arch }}.tar.gz"
    dest: "{{ containerd_bin_dir }}"
    mode: 0755
    remote_src: yes
    extra_opts:
      - --strip-components=1
  notify: restart containerd

- name: runc | Download runc binary
  get_url:
    url: "{{ runc_download_url }}"
    dest: "/tmp/runc"

- name: Copy runc binary from download dir
  copy:
    src: "/tmp/runc"
    dest: "{{ runc_bin_dir }}/runc"
    mode: 0755
    remote_src: true

- name: containerd | Remove orphaned binary
  file:
    path: "/usr/bin/{{ item }}"
    state: absent
  when: containerd_bin_dir != "/usr/bin"
  ignore_errors: true  # noqa ignore-errors
  with_items:
    - containerd
    - containerd-shim
    - containerd-shim-runc-v1
    - containerd-shim-runc-v2
    - ctr

- name: containerd | Generate systemd service for containerd
  template:
    src: containerd.service.j2
    dest: /etc/systemd/system/containerd.service
    mode: 0644
  notify: restart containerd

- name: containerd | Write containerd proxy drop-in
  template:
    src: http-proxy.conf.j2
    dest: "{{ containerd_systemd_dir }}/http-proxy.conf"
    mode: 0644
  notify: restart containerd
  when: http_proxy is defined or https_proxy is defined

- name: containerd | Ensure containerd directories exist
  file:
    dest: "{{ item }}"
    state: directory
    mode: 0755
    owner: root
    group: root
  with_items:
    - "{{ containerd_systemd_dir }}"
    - "{{ containerd_cfg_dir }}"
    - "{{ containerd_storage_dir }}"
    - "{{ containerd_state_dir }}"

- name: containerd | Write containerd proxy drop-in
  template:
    src: http-proxy.conf.j2
    dest: "{{ containerd_systemd_dir }}/http-proxy.conf"
    mode: 0644
  notify: restart containerd
  when: http_proxy is defined or https_proxy is defined

- name: Get defaults from containerd.
  command: containerd config default
  changed_when: false
  register: containerd_config_default
  when: containerd_default_config

- name: Write defaults to config.toml.
  copy:
    dest: /etc/containerd/config.toml
    content: "{{ containerd_config_default.stdout }}"
  notify: restart containerd
  when: containerd_default_config

- name: Configure containerd with template containerd config file
  template:
    src: config.toml.j2
    dest: "{{ containerd_cfg_dir }}/config.toml"
    owner: "root"
    mode: 0640
  notify: restart containerd

- name: Update modprobe entries
  ini_file:
    option: "{{ item.option }}"
    state: "{{ item.state }}"
    path: "/usr/lib/modules-load.d/containerd.conf"
    section: ""
    mode: "0644"
    allow_no_value: true
  loop: "{{ containerd_modprobe }}"
  notify:
    - Systemctl restart

- name: Update sysctl entries
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: "{{ item.state }}"
    sysctl_file: "/etc/sysctl.conf"
    reload: false
  loop: "{{ containerd_sysctl }}"
  notify:
    - Sysctl reload

# you can sometimes end up in a state where everything is installed
# but containerd was not started / enabled
- name: containerd | Flush handlers
  meta: flush_handlers

- name: containerd | Ensure containerd is started and enabled
  service:
    name: containerd
    enabled: yes
    state: started
